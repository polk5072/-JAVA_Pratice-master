-- 상속과 생성자 --

서브 클래스와 슈퍼 클래스는 각각 생성자를 가지고 있다.

C = new C() 를 호출하였을때 C 는 B를 호출하고 B는 A클래스를 호출한다.

이후 슈퍼클래스인 A클래스에서 A클래스의 생성자를 실행한다. 이후 B클래스 > C 클래스의 생성자가 실행되며 다음 코드로 진행된다.

슈퍼 클래스에 여러 개의 생성자가 있는 경우, 서브 클래스의 생성자는 어떻게 결정되는가

1. 슈퍼클래스의 기본 생성자가 자동으로 선택되는 경우
    - 개발자의 명시적 지시가 없으면 서브클래스의 생성자가 기본 생성자이든 매개변수를 가진 것이든 슈퍼 클래스에 만들어진 기본 생성자가 실행된다.
    - new B(int x) 매개변수 x를 가졌지만 A 클래스의 기본 생성자가 실행된다.

2. super() 를 이용하여 명시적으로 슈퍼 클래스의 생성자를 선택한다.
    - 서브클래스의 생성자에서 super()를 사용하면 슈퍼 클래스 생성자를 명시적으로 선택할 수 있다.


-- 업캐스팅과 instanceof 연산자 --

캐스팅이란 타입 변환을 말한다. 자바에서 클래스에 대한 캐스팅은 업캐스팅과 다운캐스팅으로 나뉜다.

1) 업캐스팅

한마디로 서브클래스의 객체에 대한 레퍼런스를 슈퍼클래스의 타입으로 변환하는 것을 업캐스팅이라고 한다.

ex )
Person p;
Student s = new Student();
p = s;

위에서 슈퍼클래스의 타입의 레퍼런스 p가 서브 클래스 객체를 가리키도록 치환되는 것이 업캐스팅이다.

2) 다운캐스팅

업캐스팅과 반대로 캐스팅하는 것을 다운캐스팅이라고 한다.



instanceof 연산자
-> 레퍼런스가 가리키는 객체가 어떤 클래스 타입인지 구분하기 위해, 자바에서는 instanceof 연산자를 이용한다.

--메소드 오버라이딩--
 슈퍼 클래스와 서브 클래스의 메소드 사이에 발생하는 관계로서, 슈퍼클래스에선언된 메소드와 같은 이름 , 같은 리턴 타입, 같은 매개 변수 리스트를 갖는 메소드를
서브 클래스에 재작성하는것이다.

이는 서브클래스에서 슈퍼 클래스의 메소드로 목적하는 바를 이룰 수 없을 때 동일한 이름의 메소드를 서브 클래스에 다시 작성할 수 있다.

메소드 오버라이딩은 슈퍼 클래스의 메소드를 무시하고 서브 클래스에서 오버라이딩된 메소드가 무조건 실행되도록 한다는 것인데, 이런 처리를
동적 바인딩이라고 부른다.

--인터페이스--

인터페이스는 쉽게 말해 규격으로 분류할 수 있다.

인터페이스는  Java10 기준 5종류이 멤버로 구성된다.
* 상수와 추상 메소드
* default 메소드
* private 메소드
* static 메소드

1. 추상메소드는 public abstract로 정해져 있으며, 생략될 수 있고, 다른 접근 지정으로 지정될 수 없다.

특징
1. 인터페이스는 객체를 생성할 수 없다.
2. 인터페이스 타입의 레퍼런스 변수는 선언 가능하다.
3. 인터페이스끼리 상속이 된다.
4. 인터페이스를 상속받아 클래스를 작성하면 인터페이스의 모든 추상 메소드를 구현하여야 한다.

인터페이스의 구현
-> 인터페이스 구현이란 implements 키워드를 사용하여 인터페이스의 모든 추선 메소드를 구현한 클래스를 작성하는 것을 말한다.

클래스는 인터페이스를 상속받을 수 없고, 인터페이스끼리만 상속이 가능하다.
상속을 통해 기존 인터페이스에 새로운 규격을 추가한 새로운 인터페이스를 만들 수 있으며, 인터페이스의 상속은 extends 키워드를 사용한다.

